===STEP 1===
Current: CPA(H).Left against CPA(H).Adversary;
Hop To: Game0(K, E, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Left() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace H.Enc@x0 = K.Encaps(pk);
    KEMCiphertextSpace H.Enc@c_kem0 = H.Enc@x0[0];
    KEMSharedSecretSpace H.Enc@k_dem0 = H.Enc@x0[1];
    SymCiphertextSpace H.Enc@c_dem0 = E.Enc(H.Enc@k_dem0, mL);
    return [H.Enc@c_kem0, H.Enc@c_dem0];
  }
}

SIMPLIFYING NEXT GAME
Game Game0() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem = x[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

CURRENT
Game Left() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mL);
    return [v3, v5];
  }
}

NEXT
Game Game0() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mL);
    return [v3, v5];
  }
}

Inline Success!
===STEP 2===
Reduction to apply:
Reduction R1() compose CPAKEM(K) against CPA(H).Adversary {
  PubKeySpace PK() { 
    return challenger.PK();
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace y = challenger.ENC();
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

Challenger:
Game Real() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace ENC() { 
    KEMCiphertextSpace * KEMSharedSecretSpace rsp = K.Encaps(challenger@pk);
    return rsp;
  }
}

Current: Game0(K, E, H) against CPA(H).Adversary;
Hop To: CPAKEM(K).Real compose R1(E, K, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Game0() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem = x[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace challenger.ENC@rsp0 = K.Encaps(challenger@pk);
    KEMCiphertextSpace * KEMSharedSecretSpace y = challenger.ENC@rsp0;
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

CURRENT
Game Game0() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mL);
    return [v3, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mL);
    return [v3, v5];
  }
}

Inline Success!
===STEP 3===
Current: CPAKEM(K).Real compose R1(E, K, H) against CPA(H).Adversary;
Hop To: CPAKEM(K).Ideal compose R1(E, K, H) against CPA(H).Adversary;

Valid by assumption
===STEP 4===
Reduction to apply:
Reduction R1() compose CPAKEM(K) against CPA(H).Adversary {
  PubKeySpace PK() { 
    return challenger.PK();
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace y = challenger.ENC();
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

Challenger:
Game Ideal() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace ENC() { 
    KEMCiphertextSpace * KEMSharedSecretSpace rsp = K.Encaps(challenger@pk);
    KEMCiphertextSpace ctxt = rsp[0];
    KEMSharedSecretSpace ss <- KEMSharedSecretSpace;
    return [ctxt, ss];
  }
}

Current: CPAKEM(K).Ideal compose R1(E, K, H) against CPA(H).Adversary;
Hop To: Game1(K, E, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace challenger.ENC@rsp0 = K.Encaps(challenger@pk);
    KEMCiphertextSpace challenger.ENC@ctxt0 = challenger.ENC@rsp0[0];
    KEMSharedSecretSpace challenger.ENC@ss0 <- KEMSharedSecretSpace;
    KEMCiphertextSpace * KEMSharedSecretSpace y = [challenger.ENC@ctxt0, challenger.ENC@ss0];
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Game1() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem <- KEMSharedSecretSpace;
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

NEXT
Game Game1() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

Inline Success!
===STEP 5===
Reduction to apply:
Reduction R2() compose OTS(E) against CPA(H).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    SymCiphertextSpace c_dem = challenger.ENC(mL, mR);
    return [c_kem, c_dem];
  }
}

Challenger:
Game Left() {
  SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace k <- KEMSharedSecretSpace;
    SymCiphertextSpace c = E.Enc(k, mL);
    return c;
  }
}

Current: Game1(K, E, H) against CPA(H).Adversary;
Hop To: OTS(E).Left compose R2(E, K, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Game1() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem <- KEMSharedSecretSpace;
    SymCiphertextSpace c_dem = E.Enc(k_dem, mL);
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace challenger.ENC@k2 <- KEMSharedSecretSpace;
    SymCiphertextSpace challenger.ENC@c2 = E.Enc(challenger.ENC@k2, mL);
    SymCiphertextSpace c_dem = challenger.ENC@c2;
    return [c_kem, c_dem];
  }
}

CURRENT
Game Game1() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

Inline Success!
===STEP 6===
Current: OTS(E).Left compose R2(E, K, H) against CPA(H).Adversary;
Hop To: OTS(E).Right compose R2(E, K, H) against CPA(H).Adversary;

Valid by assumption
===STEP 7===
Reduction to apply:
Reduction R2() compose OTS(E) against CPA(H).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    SymCiphertextSpace c_dem = challenger.ENC(mL, mR);
    return [c_kem, c_dem];
  }
}

Challenger:
Game Right() {
  SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace k <- KEMSharedSecretSpace;
    SymCiphertextSpace c = E.Enc(k, mR);
    return c;
  }
}

Current: OTS(E).Right compose R2(E, K, H) against CPA(H).Adversary;
Hop To: Game2(K, E, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace challenger.ENC@k2 <- KEMSharedSecretSpace;
    SymCiphertextSpace challenger.ENC@c2 = E.Enc(challenger.ENC@k2, mR);
    SymCiphertextSpace c_dem = challenger.ENC@c2;
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Game2() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem <- KEMSharedSecretSpace;
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

NEXT
Game Game2() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

Inline Success!
===STEP 8===
Reduction to apply:
Reduction R3() compose CPAKEM(K) against CPA(H).Adversary {
  PubKeySpace PK() { 
    return challenger.PK();
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace y = challenger.ENC();
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

Challenger:
Game Ideal() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace ENC() { 
    KEMCiphertextSpace * KEMSharedSecretSpace rsp = K.Encaps(challenger@pk);
    KEMCiphertextSpace ctxt = rsp[0];
    KEMSharedSecretSpace ss <- KEMSharedSecretSpace;
    return [ctxt, ss];
  }
}

Current: Game2(K, E, H) against CPA(H).Adversary;
Hop To: CPAKEM(K).Ideal compose R3(E, K, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Game2() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem <- KEMSharedSecretSpace;
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace challenger.ENC@rsp0 = K.Encaps(challenger@pk);
    KEMCiphertextSpace challenger.ENC@ctxt0 = challenger.ENC@rsp0[0];
    KEMSharedSecretSpace challenger.ENC@ss0 <- KEMSharedSecretSpace;
    KEMCiphertextSpace * KEMSharedSecretSpace y = [challenger.ENC@ctxt0, challenger.ENC@ss0];
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

CURRENT
Game Game2() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[0];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

Inline Success!
===STEP 9===
Current: CPAKEM(K).Ideal compose R3(E, K, H) against CPA(H).Adversary;
Hop To: CPAKEM(K).Real compose R3(E, K, H) against CPA(H).Adversary;

Valid by assumption
===STEP 10===
Reduction to apply:
Reduction R3() compose CPAKEM(K) against CPA(H).Adversary {
  PubKeySpace PK() { 
    return challenger.PK();
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace y = challenger.ENC();
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

Challenger:
Game Real() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace ENC() { 
    KEMCiphertextSpace * KEMSharedSecretSpace rsp = K.Encaps(challenger@pk);
    return rsp;
  }
}

Current: CPAKEM(K).Real compose R3(E, K, H) against CPA(H).Adversary;
Hop To: Game3(K, E, H) against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
  }
  PubKeySpace PK() { 
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace challenger.ENC@rsp0 = K.Encaps(challenger@pk);
    KEMCiphertextSpace * KEMSharedSecretSpace y = challenger.ENC@rsp0;
    KEMCiphertextSpace c_kem = y[0];
    KEMSharedSecretSpace k_dem = y[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Game3() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem = x[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mR);
    return [v3, v5];
  }
}

NEXT
Game Game3() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mR);
    return [v3, v5];
  }
}

Inline Success!
===STEP 11===
Current: Game3(K, E, H) against CPA(H).Adversary;
Hop To: CPA(H).Right against CPA(H).Adversary;

SIMPLIFYING CURRENT GAME
Game Game3() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[0];
    KEMSharedSecretSpace k_dem = x[1];
    SymCiphertextSpace c_dem = E.Enc(k_dem, mR);
    return [c_kem, c_dem];
  }
}

SIMPLIFYING NEXT GAME
Game Right() {
  PubKeySpace pk;
  SecretKeySpace sk;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
  }
  PubKeySpace PK() { 
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace H.Enc@x0 = K.Encaps(pk);
    KEMCiphertextSpace H.Enc@c_kem0 = H.Enc@x0[0];
    KEMSharedSecretSpace H.Enc@k_dem0 = H.Enc@x0[1];
    SymCiphertextSpace H.Enc@c_dem0 = E.Enc(H.Enc@k_dem0, mR);
    return [H.Enc@c_kem0, H.Enc@c_dem0];
  }
}

CURRENT
Game Game3() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mR);
    return [v3, v5];
  }
}

NEXT
Game Right() {
  PubKeySpace field1;
  Void Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
  }
  PubKeySpace PK() { 
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace ENC(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMCiphertextSpace * KEMSharedSecretSpace v2 = K.Encaps(field1);
    KEMCiphertextSpace v3 = v2[0];
    KEMSharedSecretSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v4, mR);
    return [v3, v5];
  }
}

Inline Success!
Proof Suceeded!
