===STEP 1===
Reduction to apply:
Reduction R1() compose CPAKEM(K) against CPA(KD).Adversary {
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace y = challenger.Challenge();
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Real() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace Challenge() { 
    KEMSharedSecretSpace * KEMCiphertextSpace rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace ss = rsp[0];
    KEMCiphertextSpace ctxt = rsp[1];
    return [ss, ctxt];
  }
}

Current: CPA(KD).Left against CPA(KD).Adversary;
Hop To: CPAKEM(K).Real compose R1(E, K, KD) against CPA(KD).Adversary;

SIMPLIFYING CURRENT GAME
Game Left() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace KD.Enc@x = K.Encaps(pk);
    KEMSharedSecretSpace KD.Enc@k_sym = KD.Enc@x[0];
    KEMCiphertextSpace KD.Enc@c_kem = KD.Enc@x[1];
    SymCiphertextSpace KD.Enc@c_sym = E.Enc(KD.Enc@k_sym, mL);
    return [KD.Enc@c_kem, KD.Enc@c_sym];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace challenger.Challenge@rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace challenger.Challenge@ss = challenger.Challenge@rsp[0];
    KEMCiphertextSpace challenger.Challenge@ctxt = challenger.Challenge@rsp[1];
    KEMSharedSecretSpace * KEMCiphertextSpace y = [challenger.Challenge@ss, challenger.Challenge@ctxt];
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

CURRENT
Game Left() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = v2[0];
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = v2[0];
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

Inline Success!
===STEP 2===
Current: CPAKEM(K).Real compose R1(E, K, KD) against CPA(KD).Adversary;
Hop To: CPAKEM(K).Random compose R1(E, K, KD) against CPA(KD).Adversary;

Valid by assumption
===STEP 3===
Reduction to apply:
Reduction R1() compose CPAKEM(K) against CPA(KD).Adversary {
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace y = challenger.Challenge();
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Random() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace Challenge() { 
    KEMSharedSecretSpace * KEMCiphertextSpace rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace ss <- KEMSharedSecretSpace;
    KEMCiphertextSpace ctxt = rsp[1];
    return [ss, ctxt];
  }
}

Reduction to apply:
Reduction R2() compose KeyUniformity(E) against CPA(KD).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace k_sym = challenger.Challenge();
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Random() {
  KEMSharedSecretSpace Challenge() { 
    KEMSharedSecretSpace k <- KEMSharedSecretSpace;
    return k;
  }
}

Current: CPAKEM(K).Random compose R1(E, K, KD) against CPA(KD).Adversary;
Hop To: KeyUniformity(E).Random compose R2(E, K, KD) against CPA(KD).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace challenger.Challenge@rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace challenger.Challenge@ss <- KEMSharedSecretSpace;
    KEMCiphertextSpace challenger.Challenge@ctxt = challenger.Challenge@rsp[1];
    KEMSharedSecretSpace * KEMCiphertextSpace y = [challenger.Challenge@ss, challenger.Challenge@ctxt];
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace challenger.Challenge@k <- KEMSharedSecretSpace;
    KEMSharedSecretSpace k_sym = challenger.Challenge@k;
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

Inline Success!
===STEP 4===
Current: KeyUniformity(E).Random compose R2(E, K, KD) against CPA(KD).Adversary;
Hop To: KeyUniformity(E).Real compose R2(E, K, KD) against CPA(KD).Adversary;

Valid by assumption
===STEP 5===
Reduction to apply:
Reduction R2() compose KeyUniformity(E) against CPA(KD).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace k_sym = challenger.Challenge();
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Real() {
  KEMSharedSecretSpace Challenge() { 
    KEMSharedSecretSpace k = E.KeyGen();
    return k;
  }
}

Reduction to apply:
Reduction R3() compose OneTimeSecrecy(E) against CPA(KD).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = challenger.Eavesdrop(mL, mR);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Left() {
  SymCiphertextSpace Eavesdrop(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace k = E.KeyGen();
    SymCiphertextSpace c = E.Enc(k, mL);
    return c;
  }
}

Current: KeyUniformity(E).Real compose R2(E, K, KD) against CPA(KD).Adversary;
Hop To: OneTimeSecrecy(E).Left compose R3(E, K, KD) against CPA(KD).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace challenger.Challenge@k = E.KeyGen();
    KEMSharedSecretSpace k_sym = challenger.Challenge@k;
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mL);
    return [c_kem, c_sym];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[1];
    KEMSharedSecretSpace challenger.Eavesdrop@k = E.KeyGen();
    SymCiphertextSpace challenger.Eavesdrop@c = E.Enc(challenger.Eavesdrop@k, mL);
    SymCiphertextSpace c_sym = challenger.Eavesdrop@c;
    return [c_kem, c_sym];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = E.KeyGen();
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = E.KeyGen();
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mL);
    return [v4, v5];
  }
}

Inline Success!
===STEP 6===
Current: OneTimeSecrecy(E).Left compose R3(E, K, KD) against CPA(KD).Adversary;
Hop To: OneTimeSecrecy(E).Right compose R3(E, K, KD) against CPA(KD).Adversary;

Valid by assumption
===STEP 7===
Reduction to apply:
Reduction R3() compose OneTimeSecrecy(E) against CPA(KD).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = challenger.Eavesdrop(mL, mR);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Right() {
  SymCiphertextSpace Eavesdrop(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace k = E.KeyGen();
    SymCiphertextSpace c = E.Enc(k, mR);
    return c;
  }
}

Reduction to apply:
Reduction R4() compose KeyUniformity(E) against CPA(KD).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace k_sym = challenger.Challenge();
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Real() {
  KEMSharedSecretSpace Challenge() { 
    KEMSharedSecretSpace k = E.KeyGen();
    return k;
  }
}

Current: OneTimeSecrecy(E).Right compose R3(E, K, KD) against CPA(KD).Adversary;
Hop To: KeyUniformity(E).Real compose R4(E, K, KD) against CPA(KD).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMCiphertextSpace c_kem = x[1];
    KEMSharedSecretSpace challenger.Eavesdrop@k = E.KeyGen();
    SymCiphertextSpace challenger.Eavesdrop@c = E.Enc(challenger.Eavesdrop@k, mR);
    SymCiphertextSpace c_sym = challenger.Eavesdrop@c;
    return [c_kem, c_sym];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace challenger.Challenge@k = E.KeyGen();
    KEMSharedSecretSpace k_sym = challenger.Challenge@k;
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = E.KeyGen();
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = E.KeyGen();
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

Inline Success!
===STEP 8===
Current: KeyUniformity(E).Real compose R4(E, K, KD) against CPA(KD).Adversary;
Hop To: KeyUniformity(E).Random compose R4(E, K, KD) against CPA(KD).Adversary;

Valid by assumption
===STEP 9===
Reduction to apply:
Reduction R4() compose KeyUniformity(E) against CPA(KD).Adversary {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace k_sym = challenger.Challenge();
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Random() {
  KEMSharedSecretSpace Challenge() { 
    KEMSharedSecretSpace k <- KEMSharedSecretSpace;
    return k;
  }
}

Reduction to apply:
Reduction R5() compose CPAKEM(K) against CPA(KD).Adversary {
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace y = challenger.Challenge();
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Random() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace Challenge() { 
    KEMSharedSecretSpace * KEMCiphertextSpace rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace ss <- KEMSharedSecretSpace;
    KEMCiphertextSpace ctxt = rsp[1];
    return [ss, ctxt];
  }
}

Current: KeyUniformity(E).Random compose R4(E, K, KD) against CPA(KD).Adversary;
Hop To: CPAKEM(K).Random compose R5(E, K, KD) against CPA(KD).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace x = K.Encaps(pk);
    KEMSharedSecretSpace challenger.Challenge@k <- KEMSharedSecretSpace;
    KEMSharedSecretSpace k_sym = challenger.Challenge@k;
    KEMCiphertextSpace c_kem = x[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

SIMPLIFYING NEXT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace challenger.Challenge@rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace challenger.Challenge@ss <- KEMSharedSecretSpace;
    KEMCiphertextSpace challenger.Challenge@ctxt = challenger.Challenge@rsp[1];
    KEMSharedSecretSpace * KEMCiphertextSpace y = [challenger.Challenge@ss, challenger.Challenge@ctxt];
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

NEXT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 <- KEMSharedSecretSpace;
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

Inline Success!
===STEP 10===
Current: CPAKEM(K).Random compose R5(E, K, KD) against CPA(KD).Adversary;
Hop To: CPAKEM(K).Real compose R5(E, K, KD) against CPA(KD).Adversary;

Valid by assumption
===STEP 11===
Reduction to apply:
Reduction R5() compose CPAKEM(K) against CPA(KD).Adversary {
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace y = challenger.Challenge();
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

Challenger:
Game Real() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMSharedSecretSpace * KEMCiphertextSpace Challenge() { 
    KEMSharedSecretSpace * KEMCiphertextSpace rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace ss = rsp[0];
    KEMCiphertextSpace ctxt = rsp[1];
    return [ss, ctxt];
  }
}

Current: CPAKEM(K).Real compose R5(E, K, KD) against CPA(KD).Adversary;
Hop To: CPA(KD).Right against CPA(KD).Adversary;

SIMPLIFYING CURRENT GAME
Game Inlined() {
  PubKeySpace challenger@pk;
  SecretKeySpace challenger@sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    challenger@pk = k[0];
    challenger@sk = k[1];
    return challenger@pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace challenger.Challenge@rsp = K.Encaps(challenger@pk);
    KEMSharedSecretSpace challenger.Challenge@ss = challenger.Challenge@rsp[0];
    KEMCiphertextSpace challenger.Challenge@ctxt = challenger.Challenge@rsp[1];
    KEMSharedSecretSpace * KEMCiphertextSpace y = [challenger.Challenge@ss, challenger.Challenge@ctxt];
    KEMSharedSecretSpace k_sym = y[0];
    KEMCiphertextSpace c_kem = y[1];
    SymCiphertextSpace c_sym = E.Enc(k_sym, mR);
    return [c_kem, c_sym];
  }
}

SIMPLIFYING NEXT GAME
Game Right() {
  PubKeySpace pk;
  SecretKeySpace sk;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace k = K.KeyGen();
    pk = k[0];
    sk = k[1];
    return pk;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace KD.Enc@x = K.Encaps(pk);
    KEMSharedSecretSpace KD.Enc@k_sym = KD.Enc@x[0];
    KEMCiphertextSpace KD.Enc@c_kem = KD.Enc@x[1];
    SymCiphertextSpace KD.Enc@c_sym = E.Enc(KD.Enc@k_sym, mR);
    return [KD.Enc@c_kem, KD.Enc@c_sym];
  }
}

CURRENT
Game Inlined() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = v2[0];
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

NEXT
Game Right() {
  PubKeySpace field1;
  PubKeySpace Initialize() { 
    PubKeySpace * SecretKeySpace v1 = K.KeyGen();
    field1 = v1[0];
    return field1;
  }
  KEMCiphertextSpace * SymCiphertextSpace Challenge(SymMessageSpace mL, SymMessageSpace mR) { 
    KEMSharedSecretSpace * KEMCiphertextSpace v2 = K.Encaps(field1);
    KEMSharedSecretSpace v3 = v2[0];
    KEMCiphertextSpace v4 = v2[1];
    SymCiphertextSpace v5 = E.Enc(v3, mR);
    return [v4, v5];
  }
}

Inline Success!
Proof Suceeded!
